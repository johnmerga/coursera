
openapi: 3.0.0
info:
  title: Movie API
  description: "movie application api using express framework for coursera assignment."
  version: 0.1.9
servers:
  - url: http://localhost:8000/api/v1
    description: main movie url
  - url: http://localhost:8000/api/v2
    description: second movie url
components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "The Shawshank Redemption"
        directors:
          type: string
          example: "Frank Darabont"
        rating:
          type: number
          format: double
          example: 9.3

    Error:
      type: object
      properties:
        STATUS:
          type: string
          example: "ERROR"
        message:
          type: string
          example: "Movie not found"
        statusCode:
          type: integer
          format: int64
          example: 404

paths:
  /movies:
    get:
      summary: Get all movies
      operationId: getMovies
      responses:
        "200":
          description: A list of movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  STATUS:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a movie
      operationId: createMovie
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "201":
          description: A movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  STATUS:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /movies/{id}:
    get:
      summary: Get a movie by id
      operationId: getMovieById
      parameters:
        - name: id
          in: path
          description: Movie id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  STATUS:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a movie by id
      operationId: updateMovieById
      parameters:
        - name: id
          in: path
          description: Movie id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "200":
          description: A movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  STATUS:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a movie by id
      operationId: deleteMovieById
      parameters:
        - name: id
          in: path
          description: Movie id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: A movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  STATUS:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
